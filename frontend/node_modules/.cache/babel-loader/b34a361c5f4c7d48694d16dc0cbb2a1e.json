{"ast":null,"code":"/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n/**\r\n * Parse the Accept header.\r\n * @private\r\n */\n\nfunction parseAccept(accept) {\n  var accepts = splitMediaTypes(accept);\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var mediaType = parseMediaType(accepts[i].trim(), i);\n\n    if (mediaType) {\n      accepts[j++] = mediaType;\n    }\n  } // trim accepts\n\n\n  accepts.length = j;\n  return accepts;\n}\n/**\r\n * Parse a media type from the Accept header.\r\n * @private\r\n */\n\n\nfunction parseMediaType(str, i) {\n  var match = simpleMediaTypeRegExp.exec(str);\n  if (!match) return null;\n  var params = Object.create(null);\n  var q = 1;\n  var subtype = match[2];\n  var type = match[1];\n\n  if (match[3]) {\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n\n    for (var j = 0; j < kvps.length; j++) {\n      var pair = kvps[j];\n      var key = pair[0].toLowerCase();\n      var val = pair[1]; // get the value, unwrapping quotes\n\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"' ? val.substr(1, val.length - 2) : val;\n\n      if (key === 'q') {\n        q = parseFloat(value);\n        break;\n      } // store parameter\n\n\n      params[key] = value;\n    }\n  }\n\n  return {\n    type: type,\n    subtype: subtype,\n    params: params,\n    q: q,\n    i: i\n  };\n}\n/**\r\n * Get the priority of a media type.\r\n * @private\r\n */\n\n\nfunction getMediaTypePriority(type, accepted, index) {\n  var priority = {\n    o: -1,\n    q: 0,\n    s: 0\n  };\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(type, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n/**\r\n * Get the specificity of the media type.\r\n * @private\r\n */\n\n\nfunction specify(type, spec, index) {\n  var p = parseMediaType(type);\n  var s = 0;\n\n  if (!p) {\n    return null;\n  }\n\n  if (spec.type.toLowerCase() == p.type.toLowerCase()) {\n    s |= 4;\n  } else if (spec.type != '*') {\n    return null;\n  }\n\n  if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n    s |= 2;\n  } else if (spec.subtype != '*') {\n    return null;\n  }\n\n  var keys = Object.keys(spec.params);\n\n  if (keys.length > 0) {\n    if (keys.every(function (k) {\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\n    })) {\n      s |= 1;\n    } else {\n      return null;\n    }\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  };\n}\n/**\r\n * Get the preferred media types from an Accept header.\r\n * @public\r\n */\n\n\nfunction preferredMediaTypes(accept, provided) {\n  // RFC 2616 sec 14.2: no header = */*\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all types\n    return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getMediaTypePriority(type, accepts, index);\n  }); // sorted list of accepted types\n\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n/**\r\n * Compare two specs.\r\n * @private\r\n */\n\n\nfunction compareSpecs(a, b) {\n  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\r\n * Get full type string.\r\n * @private\r\n */\n\n\nfunction getFullType(spec) {\n  return spec.type + '/' + spec.subtype;\n}\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\n\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n/**\r\n * Count the number of quotes in a string.\r\n * @private\r\n */\n\n\nfunction quoteCount(string) {\n  var count = 0;\n  var index = 0;\n\n  while ((index = string.indexOf('\"', index)) !== -1) {\n    count++;\n    index++;\n  }\n\n  return count;\n}\n/**\r\n * Split a key value pair.\r\n * @private\r\n */\n\n\nfunction splitKeyValuePair(str) {\n  var index = str.indexOf('=');\n  var key;\n  var val;\n\n  if (index === -1) {\n    key = str;\n  } else {\n    key = str.substr(0, index);\n    val = str.substr(index + 1);\n  }\n\n  return [key, val];\n}\n/**\r\n * Split an Accept header into media types.\r\n * @private\r\n */\n\n\nfunction splitMediaTypes(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 1, j = 0; i < accepts.length; i++) {\n    if (quoteCount(accepts[j]) % 2 == 0) {\n      accepts[++j] = accepts[i];\n    } else {\n      accepts[j] += ',' + accepts[i];\n    }\n  } // trim accepts\n\n\n  accepts.length = j + 1;\n  return accepts;\n}\n/**\r\n * Split a string of parameters.\r\n * @private\r\n */\n\n\nfunction splitParameters(str) {\n  var parameters = str.split(';');\n\n  for (var i = 1, j = 0; i < parameters.length; i++) {\n    if (quoteCount(parameters[j]) % 2 == 0) {\n      parameters[++j] = parameters[i];\n    } else {\n      parameters[j] += ';' + parameters[i];\n    }\n  } // trim parameters\n\n\n  parameters.length = j + 1;\n\n  for (var i = 0; i < parameters.length; i++) {\n    parameters[i] = parameters[i].trim();\n  }\n\n  return parameters;\n}","map":null,"metadata":{},"sourceType":"script"}