{"ast":null,"code":"/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar debug = require('debug')('express:router:route');\n\nvar flatten = require('array-flatten');\n\nvar Layer = require('./layer');\n\nvar methods = require('methods');\n/**\r\n * Module variables.\r\n * @private\r\n */\n\n\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = Route;\n/**\r\n * Initialize `Route` with the given `path`,\r\n *\r\n * @param {String} path\r\n * @public\r\n */\n\nfunction Route(path) {\n  this.path = path;\n  this.stack = [];\n  debug('new %o', path); // route handlers for various http methods\n\n  this.methods = {};\n}\n/**\r\n * Determine if the route handles a given method.\r\n * @private\r\n */\n\n\nRoute.prototype._handles_method = function _handles_method(method) {\n  if (this.methods._all) {\n    return true;\n  }\n\n  var name = method.toLowerCase();\n\n  if (name === 'head' && !this.methods['head']) {\n    name = 'get';\n  }\n\n  return Boolean(this.methods[name]);\n};\n/**\r\n * @return {Array} supported HTTP methods\r\n * @private\r\n */\n\n\nRoute.prototype._options = function _options() {\n  var methods = Object.keys(this.methods); // append automatic head\n\n  if (this.methods.get && !this.methods.head) {\n    methods.push('head');\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    // make upper case\n    methods[i] = methods[i].toUpperCase();\n  }\n\n  return methods;\n};\n/**\r\n * dispatch req, res into this route\r\n * @private\r\n */\n\n\nRoute.prototype.dispatch = function dispatch(req, res, done) {\n  var idx = 0;\n  var stack = this.stack;\n  var sync = 0;\n\n  if (stack.length === 0) {\n    return done();\n  }\n\n  var method = req.method.toLowerCase();\n\n  if (method === 'head' && !this.methods['head']) {\n    method = 'get';\n  }\n\n  req.route = this;\n  next();\n\n  function next(err) {\n    // signal to exit route\n    if (err && err === 'route') {\n      return done();\n    } // signal to exit router\n\n\n    if (err && err === 'router') {\n      return done(err);\n    }\n\n    var layer = stack[idx++];\n\n    if (!layer) {\n      return done(err);\n    } // max sync stack\n\n\n    if (++sync > 100) {\n      return setImmediate(next, err);\n    }\n\n    if (layer.method && layer.method !== method) {\n      return next(err);\n    }\n\n    if (err) {\n      layer.handle_error(err, req, res, next);\n    } else {\n      layer.handle_request(req, res, next);\n    }\n\n    sync = 0;\n  }\n};\n/**\r\n * Add a handler for all HTTP verbs to this route.\r\n *\r\n * Behaves just like middleware and can respond or call `next`\r\n * to continue processing.\r\n *\r\n * You can use multiple `.all` call to add multiple handlers.\r\n *\r\n *   function check_something(req, res, next){\r\n *     next();\r\n *   };\r\n *\r\n *   function validate_user(req, res, next){\r\n *     next();\r\n *   };\r\n *\r\n *   route\r\n *   .all(validate_user)\r\n *   .all(check_something)\r\n *   .get(function(req, res, next){\r\n *     res.send('hello world');\r\n *   });\r\n *\r\n * @param {function} handler\r\n * @return {Route} for chaining\r\n * @api public\r\n */\n\n\nRoute.prototype.all = function all() {\n  var handles = flatten(slice.call(arguments));\n\n  for (var i = 0; i < handles.length; i++) {\n    var handle = handles[i];\n\n    if (typeof handle !== 'function') {\n      var type = toString.call(handle);\n      var msg = 'Route.all() requires a callback function but got a ' + type;\n      throw new TypeError(msg);\n    }\n\n    var layer = Layer('/', {}, handle);\n    layer.method = undefined;\n    this.methods._all = true;\n    this.stack.push(layer);\n  }\n\n  return this;\n};\n\nmethods.forEach(function (method) {\n  Route.prototype[method] = function () {\n    var handles = flatten(slice.call(arguments));\n\n    for (var i = 0; i < handles.length; i++) {\n      var handle = handles[i];\n\n      if (typeof handle !== 'function') {\n        var type = toString.call(handle);\n        var msg = 'Route.' + method + '() requires a callback function but got a ' + type;\n        throw new Error(msg);\n      }\n\n      debug('%s %o', method, this.path);\n      var layer = Layer('/', {}, handle);\n      layer.method = method;\n      this.methods[method] = true;\n      this.stack.push(layer);\n    }\n\n    return this;\n  };\n});","map":null,"metadata":{},"sourceType":"script"}