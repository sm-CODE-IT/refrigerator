{"ast":null,"code":"'use strict';\n/**\r\n * Expose `arrayFlatten`.\r\n */\n\nmodule.exports = arrayFlatten;\n/**\r\n * Recursive flatten function with depth.\r\n *\r\n * @param  {Array}  array\r\n * @param  {Array}  result\r\n * @param  {Number} depth\r\n * @return {Array}\r\n */\n\nfunction flattenWithDepth(array, result, depth) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n\n    if (depth > 0 && Array.isArray(value)) {\n      flattenWithDepth(value, result, depth - 1);\n    } else {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Recursive flatten function. Omitting depth is slightly faster.\r\n *\r\n * @param  {Array} array\r\n * @param  {Array} result\r\n * @return {Array}\r\n */\n\n\nfunction flattenForever(array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n\n    if (Array.isArray(value)) {\n      flattenForever(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Flatten an array, with the ability to define a depth.\r\n *\r\n * @param  {Array}  array\r\n * @param  {Number} depth\r\n * @return {Array}\r\n */\n\n\nfunction arrayFlatten(array, depth) {\n  if (depth == null) {\n    return flattenForever(array, []);\n  }\n\n  return flattenWithDepth(array, [], depth);\n}","map":null,"metadata":{},"sourceType":"script"}