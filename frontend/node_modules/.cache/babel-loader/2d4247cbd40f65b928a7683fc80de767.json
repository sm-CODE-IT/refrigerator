{"ast":null,"code":"/*!\r\n * etag\r\n * Copyright(c) 2014-2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = etag;\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar crypto = require('crypto');\n\nvar Stats = require('fs').Stats;\n/**\r\n * Module variables.\r\n * @private\r\n */\n\n\nvar toString = Object.prototype.toString;\n/**\r\n * Generate an entity tag.\r\n *\r\n * @param {Buffer|string} entity\r\n * @return {string}\r\n * @private\r\n */\n\nfunction entitytag(entity) {\n  if (entity.length === 0) {\n    // fast-path empty\n    return '\"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk\"';\n  } // compute hash of entity\n\n\n  var hash = crypto.createHash('sha1').update(entity, 'utf8').digest('base64').substring(0, 27); // compute length of entity\n\n  var len = typeof entity === 'string' ? Buffer.byteLength(entity, 'utf8') : entity.length;\n  return '\"' + len.toString(16) + '-' + hash + '\"';\n}\n/**\r\n * Create a simple ETag.\r\n *\r\n * @param {string|Buffer|Stats} entity\r\n * @param {object} [options]\r\n * @param {boolean} [options.weak]\r\n * @return {String}\r\n * @public\r\n */\n\n\nfunction etag(entity, options) {\n  if (entity == null) {\n    throw new TypeError('argument entity is required');\n  } // support fs.Stats object\n\n\n  var isStats = isstats(entity);\n  var weak = options && typeof options.weak === 'boolean' ? options.weak : isStats; // validate argument\n\n  if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {\n    throw new TypeError('argument entity must be string, Buffer, or fs.Stats');\n  } // generate entity tag\n\n\n  var tag = isStats ? stattag(entity) : entitytag(entity);\n  return weak ? 'W/' + tag : tag;\n}\n/**\r\n * Determine if object is a Stats object.\r\n *\r\n * @param {object} obj\r\n * @return {boolean}\r\n * @api private\r\n */\n\n\nfunction isstats(obj) {\n  // genuine fs.Stats\n  if (typeof Stats === 'function' && obj instanceof Stats) {\n    return true;\n  } // quack quack\n\n\n  return obj && typeof obj === 'object' && 'ctime' in obj && toString.call(obj.ctime) === '[object Date]' && 'mtime' in obj && toString.call(obj.mtime) === '[object Date]' && 'ino' in obj && typeof obj.ino === 'number' && 'size' in obj && typeof obj.size === 'number';\n}\n/**\r\n * Generate a tag for a stat.\r\n *\r\n * @param {object} stat\r\n * @return {string}\r\n * @private\r\n */\n\n\nfunction stattag(stat) {\n  var mtime = stat.mtime.getTime().toString(16);\n  var size = stat.size.toString(16);\n  return '\"' + size + '-' + mtime + '\"';\n}","map":null,"metadata":{},"sourceType":"script"}